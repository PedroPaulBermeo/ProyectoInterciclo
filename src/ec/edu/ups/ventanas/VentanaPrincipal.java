/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ec.edu.ups.ventanas;

import ec.edu.ups.ventanas.objetos.Coordenada;
import ec.edu.ups.ventanas.objetos.NodoVisitar;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;
import java.util.List;
import java.util.SortedSet;
import java.util.TreeSet;
import javafx.scene.control.TableRow;
import javax.swing.DefaultCellEditor;
import javax.swing.JComboBox;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumn;
import javax.swing.table.TableRowSorter;
import javax.swing.text.TableView;

/**
 *
 * @author Pedro Bermeo
 */
public class VentanaPrincipal extends javax.swing.JFrame {

    private String[][] matriz;
    private int filas;
    private int columnas;
    private int nObstaculos;

    private double distanciaEstimada;
    private double distanciaTotal;

    private Coordenada coordenadasInicio;
    private Coordenada coordenadasFin;
    private List<Coordenada> obstaculos;
    private List<Coordenada> ruta;

    private NodoVisitar nov;

    private Coordenada cm;
    //private SortedSet<NodoVisitar> nodosVisitar;
    private List<NodoVisitar> nodosVisitar;
    private List<NodoVisitar> visitados;

    public VentanaPrincipal() {
        initComponents();
        filas = 0;
        columnas = 0;
        nObstaculos = 0;

        distanciaEstimada = 0.00;
        distanciaTotal = 0.00;

        coordenadasInicio = new Coordenada();
        coordenadasFin = new Coordenada();
        obstaculos = new ArrayList<Coordenada>();
        ruta = new ArrayList<Coordenada>();

        nov = new NodoVisitar();

        cm = new Coordenada();
        //nodosVisitar = new TreeSet<>();
        nodosVisitar = new ArrayList<>();
        visitados = new ArrayList<>();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jComboBox1 = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        txtFilas = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        txtColumnas = new javax.swing.JTextField();
        txtObstaculos = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        cmdGuardar = new javax.swing.JButton();
        cmdNuevo = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblDatos = new javax.swing.JTable();
        cmdResolver = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        cbxMetodos = new javax.swing.JComboBox<>();
        cbxDistancia = new javax.swing.JComboBox<>();
        cbxContraint = new javax.swing.JComboBox<>();

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Laberinto");

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 0, 0));
        jLabel1.setText("Laberinto");

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Datos", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 14), new java.awt.Color(255, 0, 51))); // NOI18N
        jPanel1.setForeground(new java.awt.Color(255, 51, 0));

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel2.setText("Ingrese el # de Filas:");

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel3.setText("Ingrese el # de Columnas:");

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel4.setText("Ingrese el # de Obstaculos:");

        cmdGuardar.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        cmdGuardar.setText("Guardar");
        cmdGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdGuardarActionPerformed(evt);
            }
        });

        cmdNuevo.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        cmdNuevo.setText("Nuevo");
        cmdNuevo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdNuevoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtObstaculos, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                            .addComponent(jLabel2)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(txtFilas, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                            .addComponent(jLabel3)
                            .addGap(18, 18, 18)
                            .addComponent(txtColumnas, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(cmdGuardar)
                        .addGap(49, 49, 49)
                        .addComponent(cmdNuevo)))
                .addGap(31, 31, 31))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txtFilas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(txtColumnas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(14, 14, 14)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(txtObstaculos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 12, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cmdGuardar)
                    .addComponent(cmdNuevo)))
        );

        tblDatos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(tblDatos);

        cmdResolver.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        cmdResolver.setForeground(new java.awt.Color(255, 51, 0));
        cmdResolver.setText("Resolver");
        cmdResolver.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdResolverActionPerformed(evt);
            }
        });

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Resolver con:", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 14), new java.awt.Color(255, 0, 0))); // NOI18N

        cbxMetodos.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        cbxMetodos.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Fuerza Bruta", "A*", "Propagacion de Constantes" }));

        cbxDistancia.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        cbxDistancia.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Manhattan", "Euclidea" }));

        cbxContraint.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        cbxContraint.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Filas", "Columnas", "Ambas" }));

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addComponent(cbxMetodos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(cbxContraint, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(cbxDistancia, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(cbxDistancia, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(cbxMetodos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(cbxContraint, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(38, 38, 38)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(152, 152, 152)
                                .addComponent(cmdResolver)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 524, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(393, 393, 393)
                        .addComponent(jLabel1)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(55, 55, 55)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 361, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(42, 42, 42)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(cmdResolver)))
                .addContainerGap(47, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cmdGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdGuardarActionPerformed
        JOptionPane.showMessageDialog(rootPane, "Datos Guardados");
        txtColumnas.setEnabled(false);
        txtObstaculos.setEnabled(false);
        txtFilas.setEnabled(false);

        this.agregarDatos();

    }//GEN-LAST:event_cmdGuardarActionPerformed

    private void cmdNuevoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdNuevoActionPerformed
        nuevo();
    }//GEN-LAST:event_cmdNuevoActionPerformed

    private void cmdResolverActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdResolverActionPerformed
        // resolverLaberinto(coordenadasInicio);
     
        nodosVisitar = new ArrayList<>();
        visitados = new ArrayList<>();

        if (cbxMetodos.getSelectedItem().equals("Fuerza Bruta")) {
            ruta = new ArrayList<>();
            resolverLaberinto(coordenadasInicio);
        } else if (cbxMetodos.getSelectedItem().equals("A*")) {
            nov = new NodoVisitar();
            nov.setNodo(coordenadasInicio);
            if (cbxDistancia.getSelectedItem().equals("Manhattan")) {
                nov.setDistancia(calcularDesplazamientos(coordenadasInicio) + calcularManhattan(coordenadasInicio));

            } else if (cbxDistancia.getSelectedItem().equals("Euclidea")) {
                nov.setDistancia(calcularDesplazamientos(coordenadasInicio) + calcularEuclides(coordenadasInicio));
            }
            visitados.add(nov);
            resolverAEstrella(coordenadasInicio);
        } else if (cbxMetodos.getSelectedItem().equals("Propagacion de Constantes")) {
            nov = new NodoVisitar();
            nov.setNodo(coordenadasInicio);
            if (cbxDistancia.getSelectedItem().equals("Manhattan")) {
                nov.setDistancia(calcularDesplazamientos(coordenadasInicio) + calcularManhattan(coordenadasInicio));

            } else if (cbxDistancia.getSelectedItem().equals("Euclidea")) {
                nov.setDistancia(calcularDesplazamientos(coordenadasInicio) + calcularEuclides(coordenadasInicio));
            }
            visitados.add(nov);
            resolverConstraint(coordenadasInicio);
        }
    }//GEN-LAST:event_cmdResolverActionPerformed

    public void resolverLaberinto(Coordenada c) {
        Coordenada coordenadaNuevo = new Coordenada();

        Coordenada coordenada = new Coordenada();

        coordenada.setX(coordenadasFin.getX() - c.getX());
        coordenada.setY(coordenadasFin.getY() - c.getY());

        if (coordenada.getX() == 0) {

            if (c.getY() < coordenadasFin.getY()) {

                coordenadaNuevo = moverAbajo(c);
            } else {
                coordenadaNuevo = moverArriba(c);

            }
        } else if (coordenada.getY() == 0) {
            if (c.getX() < coordenadasFin.getX()) {
                coordenadaNuevo = moverDerecha(c);
            } else {
                coordenadaNuevo = moverIzquierda(c);

            }
        } else if ((Math.abs(coordenada.getX()) > 0) || (Math.abs(coordenada.getY()) > 0)) {

            if (c.getX() == coordenadasFin.getX()) {
                if (c.getY() < coordenadasFin.getY()) {
                    coordenadaNuevo = moverAbajo(c);
                } else {
                    coordenadaNuevo = moverArriba(c);

                }
            } else if (c.getY() == coordenadasFin.getY()) {
                if (c.getX() > coordenadasFin.getX()) {
                    coordenadaNuevo = moverIzquierda(c);

                } else {
                    coordenadaNuevo = moverDerecha(c);

                }
            } else if (Math.abs(coordenada.getX()) <= Math.abs(coordenada.getY())) {

                if (c.getX() > coordenadasFin.getX()) {
                    coordenadaNuevo = moverIzquierda(c);
                } else if (c.getX() <= coordenadasFin.getX()) {
                    coordenadaNuevo = moverDerecha(c);

                }

            } else {

                if (c.getY() >= coordenadasFin.getY()) {
                    coordenadaNuevo = moverArriba(c);
                } else {
                    coordenadaNuevo = moverAbajo(c);
                }
            }

        }
        if ((coordenadaNuevo.getX() != coordenadasFin.getX()) || (coordenadaNuevo.getY() != coordenadasFin.getY())) {
            resolverLaberinto(coordenadaNuevo);
        } else if ((coordenadaNuevo.getX() == coordenadasFin.getX()) && (coordenadaNuevo.getY() == coordenadasFin.getY())) {
            JOptionPane.showMessageDialog(rootPane, "Laberinto Resuelto");
            System.out.println("Ruta" + ruta.toString());

        }
    }

    public Coordenada moverAbajo(Coordenada p) {
        System.out.println("Tamaño Principal" + obstaculos.size());

        System.out.println("Llego con " + obstaculos.toString());

        Coordenada cn = new Coordenada();

        int cont = 0;
        for (int i = p.getY() + 1; i <= coordenadasFin.getY(); i++) {
            cont++;

            if ((i == coordenadasFin.getY()) && (coordenadasFin.getX() == p.getX())) {
                p.setY(p.getY() + cont);
                //System.out.println("Ruta" + p.toString());
                ruta.add(p);
                return p;
            } else {
                cn = new Coordenada();
                cn.setX(p.getX());
                cn.setY(i);

                System.out.println("Antes de buscar obstaculos" + cn.toString());
                for (Coordenada puntos : obstaculos) {

                    if ((puntos.getX() == cn.getX()) && (puntos.getY() == cn.getY())) {
                        System.out.println("Encontro Obstaculo y retorna");
                        System.out.println("Punto encontrado" + puntos.toString());
                        cn = new Coordenada();
                        cn.setX(puntos.getX() + 1);
                        cn.setY(puntos.getY());
                        tblDatos.setValueAt("-", cn.getY(), cn.getX());
                        System.out.println("retrona" + cn.toString());

                        return cn;
                    }
                }
                tblDatos.setValueAt("-", i, p.getX());

                //System.out.println("Ruta" + cn.toString());
                ruta.add(cn);

            }
        }
        p.setY(p.getY() + cont);

        return p;

    }

    public Coordenada moverArriba(Coordenada p) {

        Coordenada cn = new Coordenada();

        int cont = 0;
        for (int i = p.getY() - 1; i >= coordenadasFin.getY(); i--) {
            cont++;
            if ((i == coordenadasFin.getY()) && (coordenadasFin.getX() == p.getX())) {
                p.setY(p.getY() - cont);
                //System.out.println("Ruta" + p.toString());
                ruta.add(p);
                return p;
            } else {
                cn = new Coordenada();
                cn.setX(p.getX());
                cn.setY(i);
                for (Coordenada puntos : obstaculos) {

                    if ((puntos.getX() == cn.getX()) && (puntos.getY() == cn.getY())) {
                        System.out.println("Encontro Obstaculo y retorna");
                        System.out.println("Punto encontrado" + puntos.toString());
                        cn = new Coordenada();
                        cn.setX(puntos.getX() + 1);
                        cn.setY(puntos.getY());
                        tblDatos.setValueAt("-", cn.getY(), cn.getX());
                        System.out.println("retrona" + cn.toString());

                        return cn;
                    }
                }
                //System.out.println("Ruta" + cn.toString());
                tblDatos.setValueAt("-", i, p.getX());

                ruta.add(cn);
            }
        }
        p.setY(p.getY() - cont);

        return p;
    }

    public Coordenada moverIzquierda(Coordenada p) {

        Coordenada cn = new Coordenada();

        int cont = 0;
        for (int i = p.getX() - 1; i >= coordenadasFin.getX(); i--) {
            cont++;
            if (i == coordenadasFin.getX() && (coordenadasFin.getY() == p.getY())) {
                p.setX(p.getX() - cont);
                //System.out.println("Ruta" + p.toString());
                ruta.add(p);
                return p;
            } else {
                cn = new Coordenada();
                cn.setX(i);
                cn.setY(p.getY());
                //System.out.println("Ruta" + cn.toString());
                for (Coordenada puntos : obstaculos) {

                    if ((puntos.getX() == cn.getX()) && (puntos.getY() == cn.getY())) {
                        System.out.println("Encontro Obstaculo y retorna");
                        System.out.println("Punto encontrado" + puntos.toString());
                        cn = new Coordenada();
                        cn.setX(puntos.getX());
                        cn.setY(puntos.getY() + 1);
                        tblDatos.setValueAt("-", cn.getY(), cn.getX());
                        System.out.println("retrona" + cn.toString());

                        return cn;
                    }
                }
                tblDatos.setValueAt("-", p.getY(), i);

                ruta.add(cn);
            }

        }
        p.setX(p.getX() - cont);

        return p;
    }

    public Coordenada moverDerecha(Coordenada p) {

        Coordenada cn = new Coordenada();

        int cont = 0;

        for (int i = p.getX() + 1; i <= coordenadasFin.getX(); i++) {
            cont++;

            if ((i == coordenadasFin.getX()) && (coordenadasFin.getY() == p.getY())) {
                p.setX(p.getX() + cont);
                //System.out.println("Ruta" + p.toString());
                ruta.add(p);
                return p;
            } else {

                cn = new Coordenada();
                cn.setX(i);
                cn.setY(p.getY());
                // System.out.println("Ruta" + cn.toString());
                for (Coordenada puntos : obstaculos) {

                    if ((puntos.getX() == cn.getX()) && (puntos.getY() == cn.getY())) {
                        System.out.println("Encontro Obstaculo y retorna");
                        System.out.println("Punto encontrado" + puntos.toString());
                        cn = new Coordenada();
                        cn.setX(puntos.getX());
                        cn.setY(puntos.getY() + 1);
                        tblDatos.setValueAt("-", cn.getY(), cn.getX());
                        System.out.println("retrona" + cn.toString());

                        return cn;
                    }
                }
                tblDatos.setValueAt("-", p.getY(), i);
                ruta.add(cn);
            }
        }
        p.setX(p.getX() + cont);

        return p;

    }

    public Double calcularManhattan(Coordenada ci) {
        distanciaEstimada = 0.00;
        distanciaEstimada = Math.abs(ci.getX() - coordenadasFin.getX()) + Math.abs(ci.getY() - coordenadasFin.getY());
        return distanciaEstimada;
    }

    public Double calcularEuclides(Coordenada ci) {
        distanciaEstimada = 0.00;
        distanciaEstimada = Math.sqrt(Math.pow(ci.getX() - coordenadasFin.getX(), 2) + Math.pow(ci.getY() - coordenadasFin.getY(), 2));
        return distanciaEstimada;
    }

    public int calcularDesplazamientos(Coordenada cf) {
        return (Math.abs(cf.getX() - coordenadasInicio.getX()) + Math.abs(cf.getY() - coordenadasInicio.getY()));
    }

    public void resolverAEstrella(Coordenada ci) {
        //System.out.println("Vuelve al metodo con: " + ci);
        if ((ci.getX() == coordenadasFin.getX()) && (ci.getY() == coordenadasFin.getY())) {
            JOptionPane.showMessageDialog(this, "Laberinto solucionado");

        } else {
            int cont = 0;

            while (cont < 4) {
                cont++;
                nov = new NodoVisitar();
                cm = new Coordenada();
                if (cont == 1) {
                    cm.setX(ci.getX());
                    cm.setY(ci.getY() - 1);
                    calcularVecino(cm);
                } else if (cont == 2) {
                    cm.setX(ci.getX() + 1);
                    cm.setY(ci.getY());
                    calcularVecino(cm);
                } else if (cont == 3) {
                    cm.setX(ci.getX());
                    cm.setY(ci.getY() + 1);
                    calcularVecino(cm);
                } else if (cont == 4) {
                    cm.setX(ci.getX() - 1);
                    cm.setY(ci.getY());
                    calcularVecino(cm);
                }

            }
            Collections.sort(nodosVisitar);
            //System.out.println("Nodos x visitar Ordenados" + nodosVisitar);
            visitados.add(nodosVisitar.get(0));
            nodosVisitar.remove(0);
            System.out.println("Visitados" + visitados);
            tblDatos.setValueAt("-", visitados.get(visitados.size() - 1).getNodo().getY(), visitados.get(visitados.size() - 1).getNodo().getX());
            resolverAEstrella(visitados.get(visitados.size() - 1).getNodo());
        }
    }

    public void resolverConstraint(Coordenada ci) {
        if ((ci.getX() == coordenadasFin.getX()) && (ci.getY() == coordenadasFin.getY())) {
            JOptionPane.showMessageDialog(this, "Laberinto solucionado");

        } else {
            int cont = 0;

            while (cont < 4) {
                cont++;
                nov = new NodoVisitar();
                cm = new Coordenada();
                if (cont == 1) {
                    cm.setX(ci.getX());
                    cm.setY(ci.getY() - 1);
                    //Filas, Columnas, Ambas
                    if (cbxContraint.getSelectedItem().equals("Filas")) {
                        calcularVecinoConstraintFilas(cm);
                    } else if (cbxContraint.getSelectedItem().equals("Columnas")) {
                        calcularVecinoConstraintColumnas(cm);
                    } else if (cbxContraint.getSelectedItem().equals("Ambas")) {
                        calcularVecinoConstraintAmbas(cm);
                    }
                } else if (cont == 2) {
                    cm.setX(ci.getX() + 1);
                    cm.setY(ci.getY());
                    if (cbxContraint.getSelectedItem().equals("Filas")) {
                        calcularVecinoConstraintFilas(cm);
                    } else if (cbxContraint.getSelectedItem().equals("Columnas")) {
                        calcularVecinoConstraintColumnas(cm);
                    } else if (cbxContraint.getSelectedItem().equals("Ambas")) {
                        calcularVecinoConstraintAmbas(cm);
                    }
                } else if (cont == 3) {
                    cm.setX(ci.getX());
                    cm.setY(ci.getY() + 1);
                    if (cbxContraint.getSelectedItem().equals("Filas")) {
                        calcularVecinoConstraintFilas(cm);
                    } else if (cbxContraint.getSelectedItem().equals("Columnas")) {
                        calcularVecinoConstraintColumnas(cm);
                    } else if (cbxContraint.getSelectedItem().equals("Ambas")) {
                        calcularVecinoConstraintAmbas(cm);
                    }
                } else if (cont == 4) {
                    cm.setX(ci.getX() - 1);
                    cm.setY(ci.getY());
                    if (cbxContraint.getSelectedItem().equals("Filas")) {
                        calcularVecinoConstraintFilas(cm);
                    } else if (cbxContraint.getSelectedItem().equals("Columnas")) {
                        calcularVecinoConstraintColumnas(cm);
                    } else if (cbxContraint.getSelectedItem().equals("Ambas")) {
                        calcularVecinoConstraintAmbas(cm);
                    }
                }

            }
            Collections.sort(nodosVisitar);
            //System.out.println("Nodos x visitar Ordenados" + nodosVisitar);
            visitados.add(nodosVisitar.get(0));
            nodosVisitar.remove(0);
            System.out.println("Visitados" + visitados);
            tblDatos.setValueAt("-", visitados.get(visitados.size() - 1).getNodo().getY(), visitados.get(visitados.size() - 1).getNodo().getX());
            resolverAEstrella(visitados.get(visitados.size() - 1).getNodo());
        }
    }

    public void calcularVecinoConstraintFilas(Coordenada c) {
        System.out.println("Llega con el vecino Constraint" + c);

        if (!((c.getX() < 0) || (c.getY() < 0) || (c.getX() == columnas) || (c.getY() == filas) || (validarConincideObscaculo(c))
                || (validarNoVisitado(c)) || (validarFila(c)))) {
            //System.out.println("Paso el if");
            nov.setNodo(c);
            if (cbxDistancia.getSelectedItem().equals("Manhattan")) {
                nov.setDistancia(calcularDesplazamientos(c) + calcularManhattan(c));

            } else if (cbxDistancia.getSelectedItem().equals("Euclidea")) {
                nov.setDistancia(calcularDesplazamientos(c) + calcularEuclides(c));
            }
            nodosVisitar.add(nov);
        }
    }

    public void calcularVecinoConstraintColumnas(Coordenada c) {
        System.out.println("Llega con el vecino Constraint" + c);

        if (!((c.getX() < 0) || (c.getY() < 0) || (c.getX() == columnas) || (c.getY() == filas) || (validarConincideObscaculo(c))
                || (validarNoVisitado(c)) || (validarColumna(c)))) {
            //System.out.println("Paso el if");
            nov.setNodo(c);
            if (cbxDistancia.getSelectedItem().equals("Manhattan")) {
                nov.setDistancia(calcularDesplazamientos(c) + calcularManhattan(c));

            } else if (cbxDistancia.getSelectedItem().equals("Euclidea")) {
                nov.setDistancia(calcularDesplazamientos(c) + calcularEuclides(c));
            }
            nodosVisitar.add(nov);
        }
    }

    public void calcularVecinoConstraintAmbas(Coordenada c) {
        System.out.println("Llega con el vecino Constraint" + c);

        if (!((c.getX() < 0) || (c.getY() < 0) || (c.getX() == columnas) || (c.getY() == filas) || (validarConincideObscaculo(c))
                || (validarNoVisitado(c)) || (validarColumna(c)) || (validarFila(c)))) {
            //System.out.println("Paso el if");
            nov.setNodo(c);
            if (cbxDistancia.getSelectedItem().equals("Manhattan")) {
                nov.setDistancia(calcularDesplazamientos(c) + calcularManhattan(c));

            } else if (cbxDistancia.getSelectedItem().equals("Euclidea")) {
                nov.setDistancia(calcularDesplazamientos(c) + calcularEuclides(c));
            }
            nodosVisitar.add(nov);
        }
    }

    public boolean validarFila(Coordenada c) {
        for (int i = 0; i < obstaculos.size(); i++) {
            if ((obstaculos.get(i).getX() - c.getX()) == 0) {
                return true;
            }
        }
        return false;
    }

    public boolean validarColumna(Coordenada c) {
        for (int i = 0; i < obstaculos.size(); i++) {
            if ((obstaculos.get(i).getY() - c.getY()) == 0) {
                return true;
            }
        }
        return false;
    }

    public void calcularVecino(Coordenada c) {
        //System.out.println("Llega con el vecino" + c);

        if (!((c.getX() < 0) || (c.getY() < 0) || (c.getX() == columnas) || (c.getY() == filas) || (validarConincideObscaculo(c)) || (validarNoVisitado(c)))) {
            //System.out.println("Paso el if");
            nov.setNodo(c);
            if (cbxDistancia.getSelectedItem().equals("Manhattan")) {
                nov.setDistancia(calcularDesplazamientos(c) + calcularManhattan(c));

            } else if (cbxDistancia.getSelectedItem().equals("Euclidea")) {
                nov.setDistancia(calcularDesplazamientos(c) + calcularEuclides(c));
            }
            nodosVisitar.add(nov);
        }
    }

    public boolean validarNoVisitado(Coordenada c) {
        //System.out.println("Llego a validar no visitado" + c);
        if ((c.getX() == coordenadasInicio.getX())) {
            return true;
        }
        if (visitados.size() > 1) {
            for (NodoVisitar nv : visitados) {
                if ((nv.getNodo().getX() == c.getX()) && (nv.getNodo().getY() == c.getY())) {
                    return true;
                }
            }
        }
        if (nodosVisitar.size() > 0) {
            for (NodoVisitar nv : nodosVisitar) {
                if ((nv.getNodo().getX() == c.getX()) && (nv.getNodo().getY() == c.getY())) {
                    return true;
                }
            }

        }
        return false;
    }

    public boolean validarConincideObscaculo(Coordenada coordenada) {
        for (Coordenada c : obstaculos) {
            if ((c.getX() == coordenada.getX()) && (c.getY() == coordenada.getY())) {
                return true;
            }
        }
        return false;
    }

    public void nuevo() {
        txtFilas.setText("");
        txtColumnas.setText("");
        txtObstaculos.setText("");
        txtFilas.setEnabled(true);
        txtColumnas.setEnabled(true);
        txtObstaculos.setEnabled(true);

    }

    public void agregarDatos() {
        coordenadasInicio = new Coordenada();
        coordenadasFin = new Coordenada();
        filas = Integer.parseInt(txtFilas.getText());
        columnas = Integer.parseInt(txtColumnas.getText());

        DefaultTableModel modelo = new DefaultTableModel(filas, columnas);
        matriz = new String[filas][columnas];

        tblDatos.setModel(modelo);
        //tblDatos.getTableHeader().setVisible(false);//Oculta el encabezado de titulos

        coordenadasInicio = generarCoordenadas();
        boolean coincide = false;
        do {
            coincide = false;
            coordenadasFin = generarCoordenadas();

            // System.out.println("Inicio" + coordenadasInicio.toString());
            // System.out.println("Fin" + coordenadasFin.toString());
            if ((coordenadasInicio.getX() == coordenadasFin.getX()) && (coordenadasInicio.getY() == coordenadasFin.getY())) {

                coincide = true;
            }

        } while (coincide == true);

        for (int i = 0; i < tblDatos.getRowCount(); i++) {
            for (int j = 0; j < tblDatos.getColumnCount(); j++) {
                if (i == coordenadasInicio.getY() && j == coordenadasInicio.getX()) {
                    tblDatos.setValueAt("I", i, j);
                    matriz[i][j] = "I";
                } else if (i == coordenadasFin.getY() && j == coordenadasFin.getX()) {
                    tblDatos.setValueAt("F", i, j);
                    matriz[i][j] = "F";
                }
            }
        }
        List<Coordenada> obstaculos = generarObstaculos();

        // System.out.println("Obstaculos" + obstaculos.toString());
        for (int i = 0; i < tblDatos.getRowCount(); i++) {
            for (int j = 0; j < tblDatos.getColumnCount(); j++) {

                for (Coordenada c : obstaculos) {
                    if (i == c.getX() && j == c.getY()) {
                        tblDatos.setValueAt("*", j, i);
                        matriz[j][i] = "*";
                    }
                }
            }

        }

    }

    public Coordenada generarCoordenadas() {
        Coordenada coordenada = new Coordenada();
        coordenada.setX((int) (Math.random() * filas));
        coordenada.setY((int) (Math.random() * columnas));

        return coordenada;

    }

    public List<Coordenada> generarObstaculos() {
        nObstaculos = Integer.parseInt(txtObstaculos.getText());

        obstaculos = new ArrayList<>();
        boolean repite = false;
        int x = 0;
        int y = 0;
        Coordenada coordenada;
        for (int i = 0; i < nObstaculos; i++) {

            do {
                repite = false;
                coordenada = new Coordenada();

                x = ((int) (Math.random() * filas));
                y = ((int) (Math.random() * columnas));

                if (((coordenadasInicio.getX() == x) && (coordenadasInicio.getY() == y)) || ((coordenadasFin.getX() == x) && (coordenadasFin.getY() == y))) {
                    repite = true;
                    //     System.out.println("Es igual a i o f");
                } else if (obstaculos.size() > 0) {
                    for (Coordenada c : obstaculos) {
                        if ((c.getX() == x) && (c.getY() == y)) {
                            //         System.out.println("Punto previo=");
                            repite = true;
                            break;
                        }
                    }
                }

            } while (repite == true);
            coordenada.setX(x);
            coordenada.setY(y);

            obstaculos.add(coordenada);
        }
        return obstaculos;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(VentanaPrincipal.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(VentanaPrincipal.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(VentanaPrincipal.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(VentanaPrincipal.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new VentanaPrincipal().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> cbxContraint;
    private javax.swing.JComboBox<String> cbxDistancia;
    private javax.swing.JComboBox<String> cbxMetodos;
    private javax.swing.JButton cmdGuardar;
    private javax.swing.JButton cmdNuevo;
    private javax.swing.JButton cmdResolver;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tblDatos;
    private javax.swing.JTextField txtColumnas;
    private javax.swing.JTextField txtFilas;
    private javax.swing.JTextField txtObstaculos;
    // End of variables declaration//GEN-END:variables
}
